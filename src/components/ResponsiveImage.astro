---
import type { ImageOutputFormat } from 'astro';
import { getImage } from 'astro:assets';

type TResponsiveImage = {
  src: ImageMetadata;
  placeholder: ImageMetadata;
  loading?: string;
  class?: string;
  alt: string;
  format?: ImageOutputFormat;
  sizes: number[];
  layout: number;
};

async function generateResponsiveImage({
  src,
  format,
  sizes,
}: Omit<TResponsiveImage, 'alt' | 'placeholder' | 'class' | 'layout'>) {
  const imgSrcSet = sizes.map(async (size) => {
    const image = await getImage({ src, width: size, format });
    return `${image.src} ${size}w`;
  });

  // const imgSrc = await getImage({ src, width: Math.max(...sizes), format });

  return {
    srcSet: await Promise.all(imgSrcSet),
    //imgSrc: imgSrc.src,
  };
}

const {
  src,
  sizes,
  // format,
  alt,
  placeholder,
  loading = 'lazy',
  class: classString,
  layout = 1,
} = Astro.props;

const { srcSet: srcSetAvif } = await generateResponsiveImage({
  src,
  sizes,
  format: 'avif',
});
const { srcSet: srcSetWebp } = await generateResponsiveImage({
  src,
  sizes,
  format: 'webp',
});
const { srcSet: srcSetJpg } = await generateResponsiveImage({
  src,
  sizes,
  format: 'jpg',
});

// sm: '640px', md: '960px', lg: '1280px',

// 1/ Work page: always 100%
let mediaSizes = '100vw';

// 2/ WordCard Homepage: > 639px 2cols 50%, < 640px 100%
if (layout === 2) mediaSizes = '(min-width: 639px) 50vw, 100vw';
// 3/ WordCard WorkPage: 100%, > 639px 2cols 50%, > 1279px 3cols 33vm
else if (layout === 3)
  mediaSizes = '(min-width: 1279px) 33vw, (min-width: 639px) 50vw, 100vw';

  //  <source type="image/avif" srcset={srcSetAvif.join(', ')} sizes={mediaSizes} />

---

<picture>
  <source type="image/webp" srcset={srcSetWebp.join(', ')} sizes={mediaSizes} />
  <img
    src={src.src}
    srcset={srcSetJpg.join(', ')}
    sizes={mediaSizes}
    class={classString}
    {alt}
    width={src.width}
    height={src.height}
    {loading}
    decoding="async"
    style={`background-image: url(${placeholder.src}); background-size: cover`}
  />
</picture>
