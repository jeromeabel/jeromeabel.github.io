---
import type { ImageOutputFormat } from 'astro';
import { getImage } from 'astro:assets';

type TResponsiveImage = {
  src: ImageMetadata;
  placeholder: ImageMetadata;
  loading?: string;
  class?: string;
  alt: string;
  format?: ImageOutputFormat;
  sizes: number[];
};

async function generateResponsiveImage({
  src,
  format,
  sizes,
}: Omit<TResponsiveImage, 'alt' | 'placeholder' | 'class'>) {
  const imgSrcSet = sizes.map(async (size) => {
    const image = await getImage({ src, width: size, format });
    return `${image.src} ${size}w`;
  });

  const imgSrc = await getImage({ src, width: Math.max(...sizes), format });

  return {
    srcSet: await Promise.all(imgSrcSet),
    imgSrc: imgSrc.src,
  };
}

const { src, sizes, format, alt, placeholder, loading = "lazy", class: classString } = Astro.props;

const { srcSet: srcSetAvif, imgSrc: imgSrcAvif } = await generateResponsiveImage({ src, sizes, format:"avif" });
const { srcSet: srcSetWebp, imgSrc: imgSrcWebp } = await generateResponsiveImage({ src, sizes, format:"webp" });

---
<picture >
  <source type="image/avif" srcset={srcSetAvif.join(', ')} />
  <source type="image/webp" srcset={srcSetWebp.join(', ')} />
  <img src={placeholder.src}
    class={classString}
    style="width: 100%"
    loading={loading}
    decoding="async"
    alt={alt}
    width={src.width}
    height={src.height}
  />
</picture>


