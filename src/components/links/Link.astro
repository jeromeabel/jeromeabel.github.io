---
import { Icon } from "astro-icon/components";
import type { HTMLAttributes } from "astro/types";

export type LinkVariant = "menu" | "cta" | "secondary" | "icon" | "textIcon";

export interface Props extends HTMLAttributes<"a"> {
  label: string;
  icon?: string;
  variant?: LinkVariant;
  external?: boolean;
}

const {
  label,
  icon,
  variant = "menu",
  external = false,
  href,
  class: className,
  ...props
} = Astro.props;

// For menu links, determine if active
const currentPath = `/${Astro.url.pathname.split("/")[1].trim()}`;
const isActive =
  variant === "menu" &&
  (href === currentPath || href === currentPath.replace(/\/$/, ""));

// Set external link attributes if needed
const externalAttrs = external
  ? { target: "_blank", rel: "nofollow noopener noreferrer" }
  : {};

// Default aria and title attributes
const ariaLabel =
  props["aria-label"] || (variant === "menu" ? `${label} page` : label);
const titleAttr = props.title || (variant === "menu" ? `${label} page` : label);
---

<a
  class:list={[
    // Lien de menu (NavLink)
    {
      "hover:text-foreground border-t border-b border-transparent text-xl":
        variant === "menu",
    },
    {
      "text-muted": variant === "menu" && !isActive,
    },
    {
      "border-b-foreground text-foreground": variant === "menu" && isActive,
    },

    // CTA (PrimaryLink)
    {
      "hover-fx border-muted text-background bg-foreground flex h-10 min-w-fit items-center gap-2 rounded-full border-2 px-4 text-base sm:gap-4 lg:h-14 lg:gap-6 lg:px-6 lg:text-lg":
        variant === "cta",
    },

    // Secondary (SecondaryLink)
    {
      "flex h-14 max-w-fit items-center gap-4 rounded-full border border-dashed border-black bg-transparent px-6 text-lg text-black transition-all hover:bg-white dark:border-white dark:text-white dark:hover:bg-white dark:hover:text-black":
        variant === "secondary",
    },

    // Icon (IconLink)
    {
      "grid h-10 w-10 place-items-center rounded-full border border-dashed border-black transition hover:bg-white lg:h-14 lg:w-14 dark:border-white dark:hover:bg-white dark:hover:text-black":
        variant === "icon",
    },

    // Text + Icon (ArrowLink)
    {
      "flex w-fit rounded-full border border-dashed border-black px-4 py-2 transition-all hover:bg-[#fff] dark:border-white dark:hover:text-black":
        variant === "textIcon",
    },

    // Classe personnalisée
    className,
  ]}
  href={href}
  aria-label={ariaLabel}
  title={titleAttr}
  {...externalAttrs}
  {...props}
>
  {/* Contenu basé sur le variant */}
  {variant !== "icon" && label}

  {/* Icône pour CTA */}
  {
    icon && variant === "cta" && (
      <Icon name={icon} class="w-8 fill-none stroke-current lg:w-12" />
    )
  }

  {/* Icône pour secondary */}
  {
    icon && variant === "secondary" && (
      <Icon name={icon} class="h-6 fill-none stroke-current" />
    )
  }

  {/* Icon-only */}
  {
    icon && variant === "icon" && (
      <Icon name={icon} class="text-xl lg:text-3xl" />
    )
  }

  {/* Text + Icon */}
  {
    variant === "textIcon" && (
      <Icon name={icon || "mdi:arrow-top-right"} class="ml-1 h-6" />
    )
  }
</a>

<style>
  .hover-fx {
    background-image: linear-gradient(
      var(--color-background),
      var(--color-background)
    );
    background-size: 0 100%;
    background-repeat: no-repeat;
    transition: 0.4s;
  }

  .hover-fx:hover {
    background-size: 100% 100%;
    color: var(--color-foreground);
  }

  :global(.dark) .hover-fx {
    background-image: linear-gradient(
      var(--color-background),
      var(--color-background)
    );
  }

  :global(.dark) .hover-fx:hover {
    color: var(--color-foreground, --color-foreground);
  }

  @media (prefers-reduced-motion: reduce) {
    .hover-fx {
      transition: none;
    }
  }
</style>
