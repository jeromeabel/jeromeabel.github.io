---
import { Icon } from "astro-icon/components";
import type { HTMLAttributes } from "astro/types";
import { cva, type VariantProps } from "class-variance-authority";

const linkVariants = cva("transition-colors", {
  variants: {
    variant: {
      menuActive: "text-foreground underline underline-offset-8",
      menuInactive: "text-muted hover:text-foreground",
      default:
        "inline-block border-dashed border-current border-b max-w-fit hover:border-solid hover:text-foreground",
      bold: "font-semibold hover:text-white",
      cta: "hover-fx rounded-full px-4 lg:px-6 h-10 lg:h-14 inline-flex items-center justify-center gap-5 bg-foreground text-background border border-foreground",
      icon: "h-10 w-10 lg:h-14 lg:w-14 grid place-items-center text-xl lg:text-3xl rounded-full border border-dashed border-muted hover:border-solid hover:bg-muted-background",
      iconSmall:
        "h-6 w-6 lg:h-8 lg:w-8 grid place-items-center text-sm rounded-full border border-dashed border-muted hover:border-solid hover:bg-muted-background",
      secondary:
        "max-w-fit border-foreground text-foreground flex py-4 justify-between items-center gap-2 rounded-full border w-full px-6 text-xl hover:bg-muted-background",
      external:
        "text-foreground hover:bg-muted-background flex w-fit rounded-full border border-dashed px-4 py-2 transition-all hover:border-solid flex items-center gap-1",
    },
  },
});

export interface Props extends HTMLAttributes<"a"> {
  label?: string;
  variant?: VariantProps<typeof linkVariants>["variant"];
  icon?: string;
}

const {
  label,
  variant = "default",
  icon,
  class: className,
  ...props
} = Astro.props;

const href = String(props.href || "");
const isVariantExternal = variant === "external";
const isExternal = isVariantExternal || href.startsWith("http");

const externalAttrs = isExternal
  ? { target: "_blank", rel: "nofollow noopener noreferrer" }
  : {};

const showLabel = !["icon", "iconSmall"].includes(variant ?? "");
const iconName = icon || (isVariantExternal ? "lucide:arrow-up-right" : "");
const classes = linkVariants({ variant, className });
---

<a class={classes} title={label} {...externalAttrs} {...props}>
  {showLabel && label}
  <slot />
  {iconName && <Icon name={iconName} />}
</a>

<style>
  .hover-fx {
    background-image: linear-gradient(
      var(--color-background),
      var(--color-background)
    );
    background-size: 0 100%;
    background-repeat: no-repeat;
    transition: 0.4s;
  }

  .hover-fx:hover {
    background-size: 100% 100%;
    color: var(--color-foreground);
  }
  @media (prefers-reduced-motion: reduce) {
    .hover-fx {
      transition: none;
    }
  }
</style>
