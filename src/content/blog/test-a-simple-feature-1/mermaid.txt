```mermaid
graph TD;
    %% Class Definitions
    classDef start fill:#fff,color:#000,stroke:#000,stroke-width:2;
    classDef impl fill:#000,color:#fff,stroke:#fff,stroke-width:0;
    classDef issue fill:#f48c06,color:#000,stroke:#333,stroke-width:0;
    classDef decision fill:#FEE420,color:#000,stroke:#4F4400,stroke-width:0;
    classDef test fill:#264653,color:#fff,stroke:#060600,stroke-width:0;
    classDef exit fill:#ff0044,color:#fff,stroke-width:0;
    classDef success fill:#4CAF50,color:#fff,stroke:#fff,stroke-width:0;

    %% Start Node
    START(("🏁 Start Feature:<br> <b>Version Banner</b>")):::start

    %% v1: Initial Implementation
    IMPL1([👨‍💻 All-In-One Component]):::impl
    TEST1{{🧪👁️ Visual Tests}}:::test
    DECISION1{Confidence<br>Enough?}:::decision
    EXIT((👋 Exit)):::exit
    ISSUE1[/"⚠️ <b>Too Many Concerns</b>:<br>UI, State, Lifecycle, Dependencies"/]:::issue

    %% Connections v1
    START --> IMPL1 --> TEST1 --> DECISION1
    DECISION1 -->|Yes| EXIT
    DECISION1 -->|No| ISSUE1

    %% v2: Humble/Presenter Pattern
    IMPL2A(["👨‍💻 <b>Component</b> (Humble):<br> VersionBanner.vue"]):::impl
    IMPL2B(["👨‍💻 Composable (Presenter):<br> useVersion.ts"]):::impl
    TEST2A{{🧪 Automated Test}}:::test

    ISSUE2A[/"⚠️ <b>Integration Test</b>,<br> I prefer unit test"/]:::issue
    ISSUE2B[/"⚠️ <b>White-Box Testing</b>,<br> I prefer Black-Box Testing"/]:::issue

    %% Connections v2
    ISSUE1 -->|"Refactor:<br> Humble/Presenter Pattern"| IMPL2A & IMPL2B
    IMPL2A --> TEST2A --> |1| ISSUE2A
    ISSUE2A -->|"2/ Refactor:<br> Mock the Composable"| TEST2A --> |3| ISSUE2B

    IMPL2B --> |"with Setup"| TEST4A

    %% v3: Wrapper Component Pattern
    IMPL3A(["👨‍💻 <b>Wrapper Component</b>:<br> VersionBanner.vue"]):::impl
    IMPL3B(["👨‍💻 <b>Child Component</b>: VersionBannerUI.vue"]):::impl
    TEST3{{🧪 Automated Test}}:::test
    SUCCESS1((✅ Done!)):::success

    %% Connections v3
    ISSUE2B -->|"Refactor: Wrapper Component Pattern"| IMPL3A & IMPL3B
    IMPL3B --> TEST3 --> SUCCESS1

    %% v4: Composable Testing & Repository Pattern
    TEST4A{{🧪 Automated Test}}:::test
    ISSUE4B[/"⚠️ <b>Integration Test</b>,<br> I prefer unit test"/]:::issue
    ISSUE4C[/"⚠️ <b>White-Box Testing</b>,<br> I prefer Black-Box Testing"/]:::issue

    IMPL4A(["👨‍💻 <b>Interface</b>:<br> IVersionRepository"]):::impl
    IMPL4B(["👨‍💻 <b>Repository</b>:<br> In Memory"]):::impl
    IMPL4C(["👨‍💻 <b>Repository</b>:<br> Implementation"]):::impl
    IMPL5A(["👨‍💻 <b>Composable</b> (v2)"]):::impl
    TEST5A{{🧪 Automated Test}}:::test
    TEST5B{{🧪 Automated Test}}:::test
    SUCCESS2((✅ Done!)):::success

    %% Connections v4
    TEST4A ---|1| ISSUE4B
    ISSUE4B --> |2/ Refactor:<br>Mock Dependencies| TEST4A --> |3| ISSUE4C
    ISSUE4C --> |Refactor:<br>Repository Pattern| IMPL4A & IMPL4B & IMPL4C
    IMPL4A --> |Refactor:<br> Dependency Inversion| IMPL5A --- TEST5A
    IMPL4B --> TEST5A & TEST5B --- SUCCESS2
```
